<!-- views/profile.ejs -->
<!doctype html>
<html>
<head>
    <title>Node Authentication</title>
    <link rel="stylesheet" href="../bower_components/bootstrap/dist/css/bootstrap.css"> <!-- load bootstrap css -->
    <link rel="stylesheet" href="../bower_components/font-awesome/css/font-awesome.min.css"> <!-- load fontawesome -->
    <script src="../bower_components/jquery/dist/jquery.js"></script> <!-- load fontawesome -->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <style>
        html{height: 100%; width: 100%;}
        body{height: 100%;}
        .navbar{ border-radius: 0; background-color: #ec971f; color:white;border-color: #eea236;}
        .white, .white a {
            color: #fff;
        }
        .navbar-toggle{ border-color: white;}
        .navbar-right a { padding-top: 15px; background-color: #ec971f; border-color: #ec971f;}
        .btn :active:hover {border-color: #ec971f; }
        .btn-lg{
            width:100%;
        }
        /*	@media screen and (min < 1024px){
                .col-sm-3{
                    width: 100%;
                    padding-top: 5px;
                }

            }*/
    </style>
</head>
<body>
<% include ../partials/nav-bar.ejs %>
<div class="container">
    <div class="row">
        <div class="col-md-12 text-center">
            <h1>Shelf Sensors</h1>
        </div>
    </div>
<div class="row">
    <div class="col-md-4 text-center">
        Luminosity<br>
        <div id="luminosity"></div>
    </div>
    <div class="col-md-4 text-center">
        Weight<br>
        <div id="weight"></div>
    </div>
    <div class="col-md-4 text-center">
        Beacons<br>
        <div id="beacons"></div>
    </div>
</div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        // Load the Visualization API and the corechart package.
        google.charts.load('current', {'packages':['corechart']});

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawCharts);

        /// / Callback that creates and populates a locationData table,
        // instantiates the pie locationChart, passes in the locationData and
        // draws it.
        var maxDataPoints = 10;

        function drawCharts() {
            drawLuminosity();
            drawWeight();
            drawBeacons();
        }

        function drawBeacons() {
            var chart = new google.visualization.LineChart($('#beacons')[0]);

            var options = {
                hAxis: {
                    title: 'Time'
                },
                vAxis: {
                    title: 'Number'
                },
                curveType: 'function',
                animation: {
                    duration: 500,
                    easing: 'linear'
                },
                legend: {position: 'none'}
            };

            var data = google.visualization.arrayToDataTable([
                ['Time', 'Number'],
                [getTime(), 0]
            ]);
            $.get('http://shelf.local:8484/pi/sensors/beacons',function(result) {
                if(typeof result.value !== "string") {
                    addDataPoint(result.value.length, chart, data, options);
                }
                else {
                    $("#beacons").text(result.value);
                }
            })
            beaconSocketHandlers('ws://shelf.local:8484/pi/sensors/beacons', chart, data, options);
        }

        function drawWeight() {
            var chart = new google.visualization.LineChart($('#weight')[0]);

            var options = {
                hAxis: {
                    title: 'Time'
                },
                vAxis: {
                    title: 'Weight'
                },
                curveType: 'function',
                animation: {
                    duration: 500,
                    easing: 'linear'
                },
                legend: {position: 'none'}
            };

            var data = google.visualization.arrayToDataTable([
                ['Time', 'Weight'],
                [getTime(), 0]
            ]);

            socketHandlers('ws://shelf.local:8484/pi/sensors/weight', chart, data, options,"#weight");
        }

        function drawLuminosity() {
            var chart = new google.visualization.LineChart($('#luminosity')[0]);

            var options = {
                hAxis: {
                    title: 'Time'
                },
                vAxis: {
                    title: 'Luminosity'
                },
                curveType: 'function',
                animation: {
                    duration: 500,
                    easing: 'linear'
                },
                legend: {position: 'none'}
            };

            var data = google.visualization.arrayToDataTable([
                ['Time', 'Luminosity'],
                [getTime(), 0]
            ]);

            socketHandlers('ws://shelf.local:8484/pi/sensors/luminosity', chart, data, options, "#luminosity");
        }

        function beaconSocketHandlers(url, chart, data, options) {
            var socket = new WebSocket(url); //#A
            socket.onmessage = function (event) { //#B
                var result = JSON.parse(event.data).value.length;
                addDataPoint(result, chart, data, options);
            };

            socket.onerror = function (error) { //#C
                $("#beacons").text("For some reason it's not possible to access this infomation right now.");
                console.log('WebSocket error!');
                console.log(error);
            };
        }

        function socketHandlers(url, chart, data, options, id) {
            var socket = new WebSocket(url); //#A
            socket.onmessage = function (event) { //#B
                var result = JSON.parse(event.data).value;
                addDataPoint(result, chart, data, options);
            };

            socket.onerror = function (error) { //#C
                $(id).text("For some reason it's not possible to access this infomation right now.");
                console.log('WebSocket error!');
                console.log(error);
            };
        }

        function addDataPoint(dataPoint, chart, data, options) {
            if (data.getNumberOfRows() > maxDataPoints) {
                data.removeRow(0);
            }
            data.addRow([getTime(), dataPoint]);

            chart.draw(data, options);
        }

        function getTime() {
            var d = new Date();
            return d.toLocaleTimeString();
        }

//#A Create a WebSocket subscription to the temperature sensor. Note that the URL uses the WebSockets protocol (ws://...)
//#B Register this anonymous function to be called when a message arrives on the WebSocket
//#C Register this other anonymous function to be triggered when an error occurs on the WebSocket

    });

</script>
</body>
</html>
